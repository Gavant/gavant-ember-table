#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const yargs_1 = __importDefault(require("yargs/yargs"));
function commonArgs(yargs) {
    return yargs
        .option('testAppDir', {
        type: 'string',
        description: 'Path to the test app',
        default: 'test-app',
    })
        .option('addonDir', {
        type: 'string',
        description: 'Path to your addon',
        default: process.cwd(),
    });
}
(0, yargs_1.default)(process.argv.slice(2))
    .scriptName('addon-dev')
    .command('link-test-app', 'Ensures that a test app (that lives a subdir under an addon) has access to the addon and all appropriate deps', (yargs) => commonArgs(yargs), function (opts) {
    let { testAppDir, addonDir } = opts;
    (0, fs_extra_1.ensureSymlinkSync)((0, path_1.join)(addonDir, 'node_modules', '.bin'), (0, path_1.join)(testAppDir, 'node_modules', '.bin'), 'dir');
    (0, fs_extra_1.ensureSymlinkSync)(addonDir, (0, path_1.join)(testAppDir, 'node_modules', (0, fs_extra_1.readJSONSync)((0, path_1.join)(addonDir, 'package.json')).name));
})
    .command('sync-dev-deps', `Synchronizes a test app's devDependencies into the parent addon's devDependencies`, (yargs) => {
    return commonArgs(yargs).option('lint', {
        type: 'boolean',
        description: 'Instead of modifying package.json, print what would have been modified and exit with a failure if any changes are required.',
        default: false,
    });
}, function (opts) {
    let { testAppDir, addonDir, lint } = opts;
    let addonPkg = (0, fs_extra_1.readJSONSync)((0, path_1.join)(addonDir, 'package.json'));
    let testPkg = (0, fs_extra_1.readJSONSync)((0, path_1.join)(testAppDir, 'package.json'));
    let foundDifferences = false;
    let devDeps = Object.assign({}, addonPkg.devDependencies);
    for (let [name, range] of Object.entries(testPkg.devDependencies)) {
        if (name === addonPkg.name) {
            continue;
        }
        if (devDeps[name] !== range) {
            foundDifferences = true;
            if (lint) {
                console.error(`test app depends on ${name} ${range} but that is not present in addon's devDependencies package.json`);
            }
            else {
                devDeps[name] = range;
            }
        }
    }
    if (!foundDifferences) {
        return;
    }
    if (lint) {
        process.exit(-1);
    }
    else {
        addonPkg.devDependencies = devDeps;
        (0, fs_extra_1.writeJSONSync)((0, path_1.join)(addonDir, 'package.json'), addonPkg, { spaces: 2 });
    }
})
    .demandCommand()
    .strictCommands()
    .help().argv;
//# sourceMappingURL=commands.js.map