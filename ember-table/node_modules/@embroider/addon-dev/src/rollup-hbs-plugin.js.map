{"version":3,"file":"rollup-hbs-plugin.js","sourceRoot":"","sources":["rollup-hbs-plugin.ts"],"names":[],"mappings":"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","sourcesContent":["import { createFilter } from '@rollup/pluginutils';\nimport type {\n  Plugin,\n  PluginContext,\n  CustomPluginOptions,\n  ResolvedId,\n} from 'rollup';\nimport { readFileSync } from 'fs';\nimport { hbsToJS } from '@embroider/core';\nimport assertNever from 'assert-never';\nimport { parse as pathParse } from 'path';\n\nexport default function rollupHbsPlugin(): Plugin {\n  return {\n    name: 'rollup-hbs-plugin',\n    async resolveId(source: string, importer: string | undefined, options) {\n      let resolution = await this.resolve(source, importer, {\n        skipSelf: true,\n        ...options,\n      });\n\n      if (!resolution) {\n        return maybeSynthesizeComponentJS(this, source, importer, options);\n      } else {\n        return maybeRewriteHBS(resolution);\n      }\n    },\n\n    load(id: string) {\n      const meta = getMeta(this, id);\n      if (!meta) {\n        return;\n      }\n\n      switch (meta.type) {\n        case 'template':\n          this.addWatchFile(meta.originalId);\n          let input = readFileSync(meta.originalId, 'utf8');\n          let code = hbsToJS(input);\n          return {\n            code,\n          };\n        case 'template-only-component-js':\n          return {\n            code: templateOnlyComponent,\n          };\n        default:\n          assertNever(meta);\n      }\n    },\n  };\n}\n\nconst templateOnlyComponent =\n  `import templateOnly from '@ember/component/template-only';\\n` +\n  `export default templateOnly();\\n`;\n\ntype Meta =\n  | {\n      type: 'template';\n      originalId: string;\n    }\n  | {\n      type: 'template-only-component-js';\n    };\n\nfunction getMeta(context: PluginContext, id: string): Meta | null {\n  const meta = context.getModuleInfo(id)?.meta?.['rollup-hbs-plugin'];\n  if (meta) {\n    return meta as Meta;\n  } else {\n    return null;\n  }\n}\n\nfunction correspondingTemplate(filename: string): string {\n  let { ext } = pathParse(filename);\n  return filename.slice(0, filename.length - ext.length) + '.hbs';\n}\n\nasync function maybeSynthesizeComponentJS(\n  context: PluginContext,\n  source: string,\n  importer: string | undefined,\n  options: { custom?: CustomPluginOptions; isEntry: boolean }\n) {\n  let templateResolution = await context.resolve(\n    correspondingTemplate(source),\n    importer,\n    {\n      skipSelf: true,\n      ...options,\n    }\n  );\n  if (!templateResolution) {\n    return null;\n  }\n  // we're trying to resolve a JS module but only the corresponding HBS\n  // file exists. Synthesize the template-only component JS.\n  return {\n    id: templateResolution.id.replace(/\\.hbs$/, '.js'),\n    meta: {\n      'rollup-hbs-plugin': {\n        type: 'template-only-component-js',\n      },\n    },\n  };\n}\n\nconst hbsFilter = createFilter('**/*.hbs');\n\nfunction maybeRewriteHBS(resolution: ResolvedId) {\n  if (!hbsFilter(resolution.id)) {\n    return null;\n  }\n\n  // This creates an `*.hbs.js` that we will populate in `load()` hook.\n  return {\n    ...resolution,\n    id: resolution.id + '.js',\n    meta: {\n      'rollup-hbs-plugin': {\n        type: 'template',\n        originalId: resolution.id,\n      },\n    },\n  };\n}\n"]}