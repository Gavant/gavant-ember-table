{"version":3,"file":"rollup-app-reexports.js","sourceRoot":"","sources":["rollup-app-reexports.ts"],"names":[],"mappings":";;;;;AAAA,uCAAuD;AACvD,+BAA+B;AAC/B,0DAAkC;AAGlC,SAAwB,YAAY,CAAC,IAKpC;IACC,OAAO;QACL,IAAI,EAAE,eAAe;QACrB,cAAc,CAAC,CAAC,EAAE,MAAM;;YACtB,IAAI,GAAG,GAAG,IAAA,uBAAY,EAAC,cAAc,CAAC,CAAC;YACvC,IAAI,KAAK,GAA2B,EAAE,CAAC;YACvC,KAAK,IAAI,aAAa,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;gBAC7C,IAAI,WAAW,GAAG,MAAA,MAAA,IAAI,CAAC,WAAW,+CAAhB,IAAI,EAAe,aAAa,CAAC,mCAAI,aAAa,CAAC;gBAErE,IACE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAA,mBAAS,EAAC,aAAa,EAAE,IAAI,CAAC,CAAC;oBAC3D,CAAC,IAAA,mBAAS,EAAC,aAAa,EAAE,WAAW,CAAC,EACtC;oBACA,KAAK,CAAC,KAAK,WAAW,EAAE,CAAC,GAAG,gBAAgB,WAAW,EAAE,CAAC;oBAC1D,IAAI,CAAC,QAAQ,CAAC;wBACZ,IAAI,EAAE,OAAO;wBACb,QAAQ,EAAE,SAAS,WAAW,EAAE;wBAChC,MAAM,EAAE,4BAA4B,GAAG,CAAC,IAAI,IAAI,aAAa,CAAC,KAAK,CACjE,CAAC,EACD,CAAC,IAAA,cAAO,EAAC,aAAa,CAAC,CAAC,MAAM,CAC/B,MAAM;qBACR,CAAC,CAAC;iBACJ;aACF;YACD,GAAG,CAAC,aAAa,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC,aAAa,CAAC,EAAE;gBACzD,QAAQ,EAAE,KAAK;aAChB,CAAC,CAAC;YACH,IAAA,wBAAa,EAAC,cAAc,EAAE,GAAG,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;QACpD,CAAC;KACF,CAAC;AACJ,CAAC;AAnCD,+BAmCC","sourcesContent":["import { readJsonSync, writeJsonSync } from 'fs-extra';\nimport { extname } from 'path';\nimport minimatch from 'minimatch';\nimport type { Plugin } from 'rollup';\n\nexport default function appReexports(opts: {\n  from: string;\n  to: string;\n  include: string[];\n  mapFilename?: (filename: string) => string;\n}): Plugin {\n  return {\n    name: 'app-reexports',\n    generateBundle(_, bundle) {\n      let pkg = readJsonSync('package.json');\n      let appJS: Record<string, string> = {};\n      for (let addonFilename of Object.keys(bundle)) {\n        let appFilename = opts.mapFilename?.(addonFilename) ?? addonFilename;\n\n        if (\n          opts.include.some((glob) => minimatch(addonFilename, glob)) &&\n          !minimatch(addonFilename, '**/*.d.ts')\n        ) {\n          appJS[`./${appFilename}`] = `./dist/_app_/${appFilename}`;\n          this.emitFile({\n            type: 'asset',\n            fileName: `_app_/${appFilename}`,\n            source: `export { default } from \"${pkg.name}/${addonFilename.slice(\n              0,\n              -extname(addonFilename).length\n            )}\";\\n`,\n          });\n        }\n      }\n      pkg['ember-addon'] = Object.assign({}, pkg['ember-addon'], {\n        'app-js': appJS,\n      });\n      writeJsonSync('package.json', pkg, { spaces: 2 });\n    },\n  };\n}\n"]}