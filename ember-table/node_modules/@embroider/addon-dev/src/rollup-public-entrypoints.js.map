{"version":3,"file":"rollup-public-entrypoints.js","sourceRoot":"","sources":["rollup-public-entrypoints.ts"],"names":[],"mappings":";;;;;AAAA,0DAAiC;AACjC,+BAA4B;AAC5B,0DAAkC;AAGlC,uCAA0C;AAE1C,SAAS,gBAAgB,CAAC,QAAgB;IACxC,OAAO,QAAQ,CAAC,OAAO,CAAC,yBAAyB,EAAE,KAAK,CAAC,CAAC;AAC5D,CAAC;AAED,MAAM,UAAU,GAAG,UAAU,CAAC;AAE9B,SAAwB,iBAAiB,CAAC,IAGzC;IACC,OAAO;QACL,IAAI,EAAE,eAAe;QACrB,KAAK,CAAC,UAAU;YACd,IAAI,OAAO,GAAG,IAAA,mBAAQ,EAAC,IAAI,CAAC,MAAM,EAAE;gBAClC,KAAK,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,UAAU,CAAC;aACrC,CAAC,CAAC;YAEH,KAAK,IAAI,IAAI,IAAI,OAAO,EAAE;gBACxB,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,IAAA,mBAAS,EAAC,IAAI,EAAE,OAAO,CAAC,CAAC,EAAE;oBAC5D,yEAAyE;oBACzE,IAAI,CAAC,QAAQ,CAAC;wBACZ,IAAI,EAAE,OAAO;wBACb,EAAE,EAAE,IAAA,WAAI,EAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC;wBAC3B,QAAQ,EAAE,gBAAgB,CAAC,IAAI,CAAC;qBACjC,CAAC,CAAC;iBACJ;qBAAM;oBACL,sEAAsE;oBACtE,gEAAgE;oBAChE,mEAAmE;oBACnE,6BAA6B;oBAC7B,IAAI,cAAc,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAAC;oBAC5C,IAAI,EAAE,GAAG,IAAA,WAAI,EAAC,IAAI,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;oBAC3C,IACE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAC5B,IAAA,mBAAS,EAAC,cAAc,EAAE,OAAO,CAAC,CACnC;wBACD,CAAC,IAAA,yBAAc,EAAC,EAAE,CAAC,EACnB;wBACA,IAAI,CAAC,QAAQ,CAAC;4BACZ,IAAI,EAAE,OAAO;4BACb,EAAE;4BACF,QAAQ,EAAE,cAAc;yBACzB,CAAC,CAAC;qBACJ;iBACF;aACF;QACH,CAAC;KACF,CAAC;AACJ,CAAC;AA1CD,oCA0CC","sourcesContent":["import walkSync from 'walk-sync';\nimport { join } from 'path';\nimport minimatch from 'minimatch';\n\nimport type { Plugin } from 'rollup';\nimport { pathExistsSync } from 'fs-extra';\n\nfunction normalizeFileExt(fileName: string) {\n  return fileName.replace(/\\.ts|\\.hbs|\\.gts|\\.gjs$/, '.js');\n}\n\nconst hbsPattern = '**/*.hbs';\n\nexport default function publicEntrypoints(args: {\n  srcDir: string;\n  include: string[];\n}): Plugin {\n  return {\n    name: 'addon-modules',\n    async buildStart() {\n      let matches = walkSync(args.srcDir, {\n        globs: [...args.include, hbsPattern],\n      });\n\n      for (let name of matches) {\n        if (args.include.some((pattern) => minimatch(name, pattern))) {\n          // anything that matches one of the user's patterns is definitely emitted\n          this.emitFile({\n            type: 'chunk',\n            id: join(args.srcDir, name),\n            fileName: normalizeFileExt(name),\n          });\n        } else {\n          // this file didn't match one of the user's patterns, so it must match\n          // our hbsPattern. Infer the possible existence of a synthesized\n          // template-only component JS file and test whether that file would\n          // match the user's patterns.\n          let normalizedName = normalizeFileExt(name);\n          let id = join(args.srcDir, normalizedName);\n          if (\n            args.include.some((pattern) =>\n              minimatch(normalizedName, pattern)\n            ) &&\n            !pathExistsSync(id)\n          ) {\n            this.emitFile({\n              type: 'chunk',\n              id,\n              fileName: normalizedName,\n            });\n          }\n        }\n      }\n    },\n  };\n}\n"]}