{"version":3,"file":"template-transform-plugin.js","sourceRoot":"","sources":["template-transform-plugin.ts"],"names":[],"mappings":";;;;;AAAA,wHAAsE;AACtE,0CAA2E;AAC3E,mGAAmF;AAWnF,SAAS,cAAc,CAAC,OAAkC;IACxD,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,UAAmC,EAAE,EAAE;QACzD,4DAA4D;QAC5D,OAAO,OAAO,UAAU,KAAK,QAAQ;YACnC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,4DAA4D;YAClF,CAAC,CAAC,UAAU,CAAC;IACjB,CAAC,CAAC,CAAC;AACL,CAAC;AAED,kBAAe,IAAA,wCAAI,EAAC,CAAC,OAAgB,EAAE,EAAE;IACvC,IAAI,EACF,aAAa,EAAE,WAAW,GAAG,EAAE,EAC/B,YAAY,GAAG,2CAA2C,GAC3D,GAAG,OAAO,CAAC;IAEZ,YAAY,GAAG,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;IAE7C,MAAM,aAAa,GAAwB,cAAc,CAAC,WAAW,CAAC,CAAC;IAEvE,MAAM,MAAM,GAA2B;QACrC,QAAQ,EAAE,EAAE;QACZ,yBAAyB,EAAE,GAAG,EAAE,CAAC,IAAA,8CAAe,EAAC,YAAY,CAAC;QAC9D,OAAO,EAAE;YACP,GAAG,EAAE,aAAa;SACnB;KACF,CAAC;IAEF,OAAO,IAAI,uBAAgB,CAAC,MAAM,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC","sourcesContent":["import make from '@embroider/core/src/babel-plugin-stage1-inline-hbs';\nimport { TemplateCompiler, TemplateCompilerParams } from '@embroider/core';\nimport { getEmberExports } from '@embroider/core/src/load-ember-template-compiler';\n\nexport type TemplateTransform = () => { name: string; visitor: {} };\nexport type TemplateTransformPlugin = TemplateTransform | string;\nexport interface Options {\n  // An array of either Glimmer AST plugins or paths that can be resolved to a plugin.\n  astTransforms?: TemplateTransformPlugin[];\n  // Defaults to 'ember-source/dist/ember-template-compiler'\n  compilerPath?: string;\n}\n\nfunction resolvePlugins(plugins: TemplateTransformPlugin[]) {\n  return plugins.map((somePlugin: TemplateTransformPlugin) => {\n    // If it's a string attempt to resolve the path to a module.\n    return typeof somePlugin === 'string'\n      ? require(somePlugin) // eslint-disable-line @typescript-eslint/no-require-imports\n      : somePlugin;\n  });\n}\n\nexport default make((options: Options) => {\n  let {\n    astTransforms: somePlugins = [],\n    compilerPath = 'ember-source/dist/ember-template-compiler',\n  } = options;\n\n  compilerPath = require.resolve(compilerPath);\n\n  const astTransforms: TemplateTransform[] = resolvePlugins(somePlugins);\n\n  const params: TemplateCompilerParams = {\n    EmberENV: {},\n    loadEmberTemplateCompiler: () => getEmberExports(compilerPath),\n    plugins: {\n      ast: astTransforms,\n    },\n  };\n\n  return new TemplateCompiler(params);\n});\n"]}