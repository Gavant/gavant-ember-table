"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _Addon_srcDir, _Addon_destDir;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Addon = void 0;
const rollup_hbs_plugin_1 = __importDefault(require("./rollup-hbs-plugin"));
const rollup_public_entrypoints_1 = __importDefault(require("./rollup-public-entrypoints"));
const rollup_app_reexports_1 = __importDefault(require("./rollup-app-reexports"));
const rollup_plugin_delete_1 = __importDefault(require("rollup-plugin-delete"));
const rollup_keep_assets_1 = __importDefault(require("./rollup-keep-assets"));
const rollup_addon_dependencies_1 = __importDefault(require("./rollup-addon-dependencies"));
class Addon {
    constructor(params = {}) {
        var _a, _b;
        _Addon_srcDir.set(this, void 0);
        _Addon_destDir.set(this, void 0);
        __classPrivateFieldSet(this, _Addon_srcDir, (_a = params.srcDir) !== null && _a !== void 0 ? _a : 'src', "f");
        __classPrivateFieldSet(this, _Addon_destDir, (_b = params.destDir) !== null && _b !== void 0 ? _b : 'dist', "f");
    }
    // Given a list of globs describing modules in your srcDir, this generates
    // corresponding appTree modules that contain reexports, and updates your
    // package.json metadata to list them all.
    appReexports(patterns, opts = {}) {
        return (0, rollup_app_reexports_1.default)({
            from: __classPrivateFieldGet(this, _Addon_srcDir, "f"),
            to: __classPrivateFieldGet(this, _Addon_destDir, "f"),
            include: patterns,
            mapFilename: opts.mapFilename,
        });
    }
    // This configures rollup to emit public entrypoints for each module in your
    // srcDir that matches one of the given globs. Typical addons will want to
    // match patterns like "components/**/*.js", "index.js", and "test-support.js".
    publicEntrypoints(patterns) {
        return (0, rollup_public_entrypoints_1.default)({ srcDir: __classPrivateFieldGet(this, _Addon_srcDir, "f"), include: patterns });
    }
    // This wraps standalone .hbs files as Javascript files using inline
    // templates. This means special resolving rules for .hbs files aren't
    // required for javascript tooling to understand your package.
    hbs() {
        return (0, rollup_hbs_plugin_1.default)();
    }
    // By default rollup does not clear the output directory between builds. This
    // does that.
    clean() {
        return (0, rollup_plugin_delete_1.default)({ targets: `${__classPrivateFieldGet(this, _Addon_destDir, "f")}/*` });
    }
    // V2 Addons are allowed to contain imports of .css files. This tells rollup
    // to leave those imports alone and to make sure the corresponding .css files
    // are kept in the same relative locations in the destDir as they were in the
    // srcDir.
    keepAssets(patterns) {
        return (0, rollup_keep_assets_1.default)({
            from: __classPrivateFieldGet(this, _Addon_srcDir, "f"),
            include: patterns,
        });
    }
    // This is the default `output` configuration you should pass to rollup. We're
    // emitting ES modules, in your `destDir`, and their filenames are equal to
    // their bundle names (the bundle names get generated by `publicEntrypoints`
    // above).
    output() {
        return { dir: __classPrivateFieldGet(this, _Addon_destDir, "f"), format: 'es', entryFileNames: '[name]' };
    }
    dependencies() {
        return (0, rollup_addon_dependencies_1.default)();
    }
}
exports.Addon = Addon;
_Addon_srcDir = new WeakMap(), _Addon_destDir = new WeakMap();
//# sourceMappingURL=rollup.js.map