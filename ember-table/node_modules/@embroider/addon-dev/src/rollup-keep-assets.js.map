{"version":3,"file":"rollup-keep-assets.js","sourceRoot":"","sources":["rollup-keep-assets.ts"],"names":[],"mappings":";;;;;AAAA,0DAAiC;AAEjC,2BAAkC;AAClC,+BAA4B;AAC5B,0DAAkC;AAElC,SAAwB,UAAU,CAAC,EACjC,IAAI,EACJ,OAAO,GAIR;IACC,OAAO;QACL,IAAI,EAAE,aAAa;QAEnB,4EAA4E;QAC5E,8DAA8D;QAC9D,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO;YACvC,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,EAAE;gBACtD,QAAQ,EAAE,IAAI;gBACd,GAAG,OAAO;aACX,CAAC,CAAC;YACH,IACE,UAAU;gBACV,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,IAAA,mBAAS,EAAC,UAAU,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,EAC5D;gBACA,OAAO,EAAE,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;aACvC;YACD,OAAO,UAAU,CAAC;QACpB,CAAC;QAED,4EAA4E;QAC5E,yBAAyB;QACzB,KAAK,CAAC,cAAc;YAClB,KAAK,IAAI,IAAI,IAAI,IAAA,mBAAQ,EAAC,IAAI,EAAE;gBAC9B,KAAK,EAAE,OAAO;gBACd,WAAW,EAAE,KAAK;aACnB,CAAC,EAAE;gBACF,IAAI,CAAC,QAAQ,CAAC;oBACZ,IAAI,EAAE,OAAO;oBACb,QAAQ,EAAE,IAAI;oBACd,MAAM,EAAE,IAAA,iBAAY,EAAC,IAAA,WAAI,EAAC,IAAI,EAAE,IAAI,CAAC,EAAE,MAAM,CAAC;iBAC/C,CAAC,CAAC;aACJ;QACH,CAAC;KACF,CAAC;AACJ,CAAC;AAzCD,6BAyCC","sourcesContent":["import walkSync from 'walk-sync';\nimport type { Plugin } from 'rollup';\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\nimport minimatch from 'minimatch';\n\nexport default function keepAssets({\n  from,\n  include,\n}: {\n  from: string;\n  include: string[];\n}): Plugin {\n  return {\n    name: 'copy-assets',\n\n    // imports of assets should be left alone in the source code. This can cover\n    // the case of .css as defined in the embroider v2 addon spec.\n    async resolveId(source, importer, options) {\n      const resolution = await this.resolve(source, importer, {\n        skipSelf: true,\n        ...options,\n      });\n      if (\n        resolution &&\n        include.some((pattern) => minimatch(resolution.id, pattern))\n      ) {\n        return { id: source, external: true };\n      }\n      return resolution;\n    },\n\n    // the assets go into the output directory in the same relative locations as\n    // in the input directory\n    async generateBundle() {\n      for (let name of walkSync(from, {\n        globs: include,\n        directories: false,\n      })) {\n        this.emitFile({\n          type: 'asset',\n          fileName: name,\n          source: readFileSync(join(from, name), 'utf8'),\n        });\n      }\n    },\n  };\n}\n"]}