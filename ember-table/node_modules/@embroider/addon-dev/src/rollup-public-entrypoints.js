"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const walk_sync_1 = __importDefault(require("walk-sync"));
const path_1 = require("path");
const minimatch_1 = __importDefault(require("minimatch"));
const fs_extra_1 = require("fs-extra");
function normalizeFileExt(fileName) {
    return fileName.replace(/\.ts|\.hbs|\.gts|\.gjs$/, '.js');
}
const hbsPattern = '**/*.hbs';
function publicEntrypoints(args) {
    return {
        name: 'addon-modules',
        async buildStart() {
            let matches = (0, walk_sync_1.default)(args.srcDir, {
                globs: [...args.include, hbsPattern],
            });
            for (let name of matches) {
                if (args.include.some((pattern) => (0, minimatch_1.default)(name, pattern))) {
                    // anything that matches one of the user's patterns is definitely emitted
                    this.emitFile({
                        type: 'chunk',
                        id: (0, path_1.join)(args.srcDir, name),
                        fileName: normalizeFileExt(name),
                    });
                }
                else {
                    // this file didn't match one of the user's patterns, so it must match
                    // our hbsPattern. Infer the possible existence of a synthesized
                    // template-only component JS file and test whether that file would
                    // match the user's patterns.
                    let normalizedName = normalizeFileExt(name);
                    let id = (0, path_1.join)(args.srcDir, normalizedName);
                    if (args.include.some((pattern) => (0, minimatch_1.default)(normalizedName, pattern)) &&
                        !(0, fs_extra_1.pathExistsSync)(id)) {
                        this.emitFile({
                            type: 'chunk',
                            id,
                            fileName: normalizedName,
                        });
                    }
                }
            }
        },
    };
}
exports.default = publicEntrypoints;
//# sourceMappingURL=rollup-public-entrypoints.js.map