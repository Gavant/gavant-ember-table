{"version":3,"file":"rollup-addon-dependencies.js","sourceRoot":"","sources":["rollup-addon-dependencies.ts"],"names":[],"mappings":";;AACA,uCAAwC;AACxC,0CAKyB;AAEzB,MAAM,kBAAkB,GAAG,IAAI,GAAG,CAChC,iCAA0B,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAChD,CAAC;AAEF,SAAS,sBAAsB;IAC7B,IAAI,IAAI,GAAG,IAAI,GAAG,EAAE,CAAC;IACrB,IAAI,GAAG,GAAG,IAAA,uBAAY,EAAC,cAAc,CAAC,CAAC;IACvC,IAAI,GAAG,CAAC,YAAY,EAAE;QACpB,KAAK,IAAI,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE;YAC9C,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SAChB;KACF;IACD,IAAI,GAAG,CAAC,gBAAgB,EAAE;QACxB,KAAK,IAAI,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,EAAE;YAClD,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SAChB;KACF;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAwB,cAAc;IACpC,IAAI,IAAI,GAAG,sBAAsB,EAAE,CAAC;IAEpC,OAAO;QACL,IAAI,EAAE,iBAAiB;QAEvB,KAAK,CAAC,SAAS,CAAC,MAAM;YACpB,IAAI,OAAO,GAAG,IAAA,kBAAW,EAAC,MAAM,CAAC,CAAC;YAClC,IAAI,CAAC,OAAO,EAAE;gBACZ,wEAAwE;gBACxE,qBAAqB;gBACrB,OAAO;aACR;YAED,IACE,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;gBACjB,2BAAoB,CAAC,GAAG,CAAC,OAAO,CAAC;gBACjC,2BAAoB,CAAC,GAAG,CAAC,OAAO,CAAC;gBACjC,kBAAkB,CAAC,GAAG,CAAC,OAAO,CAAC,EAC/B;gBACA,OAAO,EAAE,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;aACvC;QACH,CAAC;KACF,CAAC;AACJ,CAAC;AAxBD,iCAwBC","sourcesContent":["import type { Plugin } from 'rollup';\nimport { readJsonSync } from 'fs-extra';\nimport {\n  emberVirtualPackages,\n  emberVirtualPeerDeps,\n  packageName,\n  templateCompilationModules,\n} from '@embroider/core';\n\nconst compilationModules = new Set(\n  templateCompilationModules.map((m) => m.module)\n);\n\nfunction resolvableDependencies() {\n  let deps = new Set();\n  let pkg = readJsonSync('package.json');\n  if (pkg.dependencies) {\n    for (let name of Object.keys(pkg.dependencies)) {\n      deps.add(name);\n    }\n  }\n  if (pkg.peerDependencies) {\n    for (let name of Object.keys(pkg.peerDependencies)) {\n      deps.add(name);\n    }\n  }\n  return deps;\n}\n\nexport default function emberExternals(): Plugin {\n  let deps = resolvableDependencies();\n\n  return {\n    name: 'ember-externals',\n\n    async resolveId(source) {\n      let pkgName = packageName(source);\n      if (!pkgName) {\n        // No package name found means this is a relative import, which we don't\n        // need to deal with.\n        return;\n      }\n\n      if (\n        deps.has(pkgName) ||\n        emberVirtualPeerDeps.has(pkgName) ||\n        emberVirtualPackages.has(pkgName) ||\n        compilationModules.has(pkgName)\n      ) {\n        return { id: source, external: true };\n      }\n    },\n  };\n}\n"]}